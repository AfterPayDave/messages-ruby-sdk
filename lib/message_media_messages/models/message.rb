# message_media_messages
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MessageMediaMessages
  # Message Model.
  class Message < BaseModel
    # URL replies and delivery reports to this message will be pushed to
    # @return [String]
    attr_accessor :callback_url

    # Content of the message
    # @return [String]
    attr_accessor :content

    # Destination number of the message
    # @return [String]
    attr_accessor :destination_number

    # Request a delivery report for this message
    # @return [Boolean]
    attr_accessor :delivery_report

    # Format of message, SMS or TTS (Text To Speech).
    # @return [FormatEnum]
    attr_accessor :format

    # Date time after which the message expires and will not be sent
    # @return [DateTime]
    attr_accessor :message_expiry_timestamp

    # Metadata for the message specified as a set of key value pairs, each key
    # can be up to 100 characters long and each value can be up to 256
    # characters long
    # ```
    # {
    #    "myKey": "myValue",
    #    "anotherKey": "anotherValue"
    # }
    # ```
    # @return [Object]
    attr_accessor :metadata

    # Scheduled delivery date time of the message
    # @return [DateTime]
    attr_accessor :scheduled

    # The title the users sees on their mobile
    # @return [String]
    attr_accessor :source_number

    # Type of source address specified, this can be INTERNATIONAL, ALPHANUMERIC
    # or SHORTCODE
    # @return [SourceNumberTypeEnum]
    attr_accessor :source_number_type

    # Unique ID of this message
    # @return [UUID | String]
    attr_accessor :message_id

    # The status of the message
    # @return [StatusEnum]
    attr_accessor :status

    # The media is used to specify the url of the media file that you are trying
    # to send. Supported file formats include png, jpeg and gif. format
    # parameter must be set to MMS for this to work.
    # @return [List of String]
    attr_accessor :media

    # The subject field is used to denote subject of the MMS message and has a
    # maximum size of 64 characters long
    # @return [String]
    attr_accessor :subject

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['callback_url'] = 'callback_url'
      @_hash['content'] = 'content'
      @_hash['destination_number'] = 'destination_number'
      @_hash['delivery_report'] = 'delivery_report'
      @_hash['format'] = 'format'
      @_hash['message_expiry_timestamp'] = 'message_expiry_timestamp'
      @_hash['metadata'] = 'metadata'
      @_hash['scheduled'] = 'scheduled'
      @_hash['source_number'] = 'source_number'
      @_hash['source_number_type'] = 'source_number_type'
      @_hash['message_id'] = 'message_id'
      @_hash['status'] = 'status'
      @_hash['media'] = 'media'
      @_hash['subject'] = 'subject'
      @_hash
    end

    def initialize(content = nil,
                   destination_number = nil,
                   callback_url = nil,
                   delivery_report = false,
                   format = nil,
                   message_expiry_timestamp = nil,
                   metadata = nil,
                   scheduled = nil,
                   source_number = nil,
                   source_number_type = nil,
                   message_id = nil,
                   status = nil,
                   media = nil,
                   subject = nil)
      @callback_url = callback_url
      @content = content
      @destination_number = destination_number
      @delivery_report = delivery_report
      @format = format
      @message_expiry_timestamp = message_expiry_timestamp
      @metadata = metadata
      @scheduled = scheduled
      @source_number = source_number
      @source_number_type = source_number_type
      @message_id = message_id
      @status = status
      @media = media
      @subject = subject
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      content = hash['content']
      destination_number = hash['destination_number']
      callback_url = hash['callback_url']
      delivery_report = hash['delivery_report'] ||= false
      format = hash['format']
      message_expiry_timestamp = APIHelper.rfc3339(hash['message_expiry_timestamp']) if
        hash['message_expiry_timestamp']
      metadata = hash['metadata']
      scheduled = APIHelper.rfc3339(hash['scheduled']) if hash['scheduled']
      source_number = hash['source_number']
      source_number_type = hash['source_number_type']
      message_id = hash['message_id']
      status = hash['status']
      media = hash['media']
      subject = hash['subject']

      # Create object from extracted values.
      Message.new(content,
                  destination_number,
                  callback_url,
                  delivery_report,
                  format,
                  message_expiry_timestamp,
                  metadata,
                  scheduled,
                  source_number,
                  source_number_type,
                  message_id,
                  status,
                  media,
                  subject)
    end
  end
end
